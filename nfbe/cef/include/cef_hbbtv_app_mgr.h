// Copyright (c) 2016 ACCESS CO.LTD. All rights reserved.
// ---------------------------------------------------------------------------
//
// The contents of this file must follow a specific format in order to
// support the CEF translator tool. See the translator.README.txt file in the
// tools directory for more information.
//

#ifndef CEF_INCLUDE_CEF_HBBTV_APP_MGR_H_
#define CEF_INCLUDE_CEF_HBBTV_APP_MGR_H_
#pragma once

#include "include/cef_base.h"
#include "include/internal/cef_types.h"

///
// Class wrapping the single instance of HBBTV Application Manager.
// Can be used on the browser host process.
///
/*--cef(source=library)--*/
class CefHBBTVAppMgr : public virtual CefBase {
 public:
  typedef uint32_t AppIndex;
  typedef void (*OnAppStateChangeCallback)(AppIndex appID);

  ///
  // Create a new CefHBBTVAppMgr object if none was ever created.
  // Otherwise return a reference to the existing object.
  ///
  /*--cef()--*/
  static CefRefPtr<CefHBBTVAppMgr> Create();


  // n.b. If "default_retval" contains '-' (e.g. -1, 0-1), translator.py
  // does not generate wrappers.  there are 2 ways to overcome.
  //   1. even though our internal implementation uses negative default value,
  //      let the corresponding cef interface uses positive default value.
  //      (i.e. content::hbbtv:E_GENERIC==-1 but default_retval=1)
  //   2. create a cef return value type, and use a symbolic name.
  // we have chosen 2.
  ///
  // Call this when sending an table with updated AIT to the HBBTV Application manager.
  // It is also called internally when an XML AIT Update is incoming.
  // This function will parse each AIT one by one and create applications accordingly.
  // This will also kill or start applications depending on their signaling.
  //
  // The param |in_ai| is an array of Application Information Table structures.
  // The param |in_count| is the length of the AIT array.
  // The param |in_isChannelChange| is true if the AIT update was generated by a broadcast channel change.
  // The param |in_isXMLAIT| is true if the AIT update was generated after downloading an XML AIT.
  // This returns E_OK in case of success and  E_GENERIC or E_NOTFOUND otherwise.
  ///
  /*--cef(default_retval=ON_AITUPDATE_E_GENERIC)--*/
  virtual cef_hbbtv_on_aitupdate_return_value_t OnAITUpdate(
      cef_hbbtv_dvb_application_information_t* in_ai, int in_count,
      bool in_isChannelChange, bool in_isXMLAIT) =0;

#if 0
  // Reserved for future development.

  ///
  // Register a simple function to be called by the application manager
  // every time when it is loading a new application.
  ///
  /*--cef()--*/
  //virtual void RegisterOnLoadAppCallback(OnAppStateChangeCallback pCallback) =0;

  ///
  // Register a simple function to be called by the application manager
  // every time when it is unloading an existing application.
  ///
  /*--cef()--*/
  //virtual void RegisterOnUnloadAppCallback(OnAppStateChangeCallback pCallback) =0;

  ///
  // Register a simple function to be called by the application manager
  // every time when it is showing an application.
  ///
  /*--cef()--*/
  //virtual void RegisterOnShowAppCallback(OnAppStateChangeCallback pCallback) =0;

  ///
  // Register a simple function to be called by the application manager
  // every time when it is hiding an application.
  ///
  /*--cef()--*/
  //virtual void RegisterOnHideAppCallback(OnAppStateChangeCallback pCallback) =0;
#endif


  ///
  // Returns a pointer to the single HBBTV App Manager instance
  // or NULL if this was not yet initialized.
  ///
  /*--cef(default_retval=NULL)--*/
  virtual CefHBBTVAppMgrPtr GetHBBTVAppMgr() =0;

  ///
  // Handling some events for test purposes.
  // Not needed for development purposes
  // Return false if the event should be sent further to the core and
  // true if the event was handled here.
  ///
  /*--cef(default_retval=false)--*/
  virtual bool PreHandleKeyboardEvent(const CefKeyEvent& event,
                                      CefEventHandle os_event) =0;
};

#endif  // CEF_INCLUDE_CEF_HBBTV_APP_MGR_H_
