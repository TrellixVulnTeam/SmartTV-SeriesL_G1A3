
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/shell/public/interfaces/shell.mojom
//

package org.chromium.mojom.mojo.shell.mojom;

import org.chromium.base.annotations.SuppressFBWarnings;


class InstanceListener_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<InstanceListener, InstanceListener.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<InstanceListener, InstanceListener.Proxy>() {
    
        public String getName() {
            return "mojo::shell::mojom::InstanceListener";
        }
    
        public int getVersion() {
          return 0;
        }
    
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }
    
        public Stub buildStub(org.chromium.mojo.system.Core core, InstanceListener impl) {
            return new Stub(core, impl);
        }
    
        public InstanceListener[] buildArray(int size) {
          return new InstanceListener[size];
        }
    };


    private static final int SET_EXISTING_INSTANCES_ORDINAL = 0;

    private static final int INSTANCE_CREATED_ORDINAL = 1;

    private static final int INSTANCE_DESTROYED_ORDINAL = 2;

    private static final int INSTANCE_PID_AVAILABLE_ORDINAL = 3;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements InstanceListener.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void setExistingInstances(
InstanceInfo[] instances) {

            InstanceListenerSetExistingInstancesParams _message = new InstanceListenerSetExistingInstancesParams();

            _message.instances = instances;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_EXISTING_INSTANCES_ORDINAL)));

        }


        @Override
        public void instanceCreated(
InstanceInfo instance) {

            InstanceListenerInstanceCreatedParams _message = new InstanceListenerInstanceCreatedParams();

            _message.instance = instance;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(INSTANCE_CREATED_ORDINAL)));

        }


        @Override
        public void instanceDestroyed(
int id) {

            InstanceListenerInstanceDestroyedParams _message = new InstanceListenerInstanceDestroyedParams();

            _message.id = id;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(INSTANCE_DESTROYED_ORDINAL)));

        }


        @Override
        public void instancePidAvailable(
int id, int pid) {

            InstanceListenerInstancePidAvailableParams _message = new InstanceListenerInstancePidAvailableParams();

            _message.id = id;

            _message.pid = pid;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(INSTANCE_PID_AVAILABLE_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<InstanceListener> {

        Stub(org.chromium.mojo.system.Core core, InstanceListener impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                InstanceListener_Internal.MANAGER, messageWithHeader);
            
            
            
            
            
                    case SET_EXISTING_INSTANCES_ORDINAL: {
            
                        InstanceListenerSetExistingInstancesParams data =
                                InstanceListenerSetExistingInstancesParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().setExistingInstances(data.instances);
                        return true;
                    }
            
            
            
            
            
                    case INSTANCE_CREATED_ORDINAL: {
            
                        InstanceListenerInstanceCreatedParams data =
                                InstanceListenerInstanceCreatedParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().instanceCreated(data.instance);
                        return true;
                    }
            
            
            
            
            
                    case INSTANCE_DESTROYED_ORDINAL: {
            
                        InstanceListenerInstanceDestroyedParams data =
                                InstanceListenerInstanceDestroyedParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().instanceDestroyed(data.id);
                        return true;
                    }
            
            
            
            
            
                    case INSTANCE_PID_AVAILABLE_ORDINAL: {
            
                        InstanceListenerInstancePidAvailableParams data =
                                InstanceListenerInstancePidAvailableParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().instancePidAvailable(data.id, data.pid);
                        return true;
                    }
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), InstanceListener_Internal.MANAGER, messageWithHeader, receiver);
            
            
            
            
            
            
            
            
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class InstanceListenerSetExistingInstancesParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public InstanceInfo[] instances;
    
    
    
        private InstanceListenerSetExistingInstancesParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public InstanceListenerSetExistingInstancesParams() {
            this(0);
        }
    
        public static InstanceListenerSetExistingInstancesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static InstanceListenerSetExistingInstancesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            InstanceListenerSetExistingInstancesParams result = new InstanceListenerSetExistingInstancesParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                
                
                {
                
                
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.instances = new InstanceInfo[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        
                        result.instances[i1] = InstanceInfo.decode(decoder2);
                        
                        
                    }
                
                }
                
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            
            
            if (instances == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
            
            
            
            
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(instances.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < instances.length; ++i0) {
                    
                    
                    encoder1.encode(instances[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                    
                }
            }
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            InstanceListenerSetExistingInstancesParams other = (InstanceListenerSetExistingInstancesParams) object;
    
            if (!java.util.Arrays.deepEquals(this.instances, other.instances))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + java.util.Arrays.deepHashCode(instances);
    
            return result;
        }
    }



    
    static final class InstanceListenerInstanceCreatedParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public InstanceInfo instance;
    
    
    
        private InstanceListenerInstanceCreatedParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public InstanceListenerInstanceCreatedParams() {
            this(0);
        }
    
        public static InstanceListenerInstanceCreatedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static InstanceListenerInstanceCreatedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            InstanceListenerInstanceCreatedParams result = new InstanceListenerInstanceCreatedParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                
                result.instance = InstanceInfo.decode(decoder1);
                
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(instance, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            InstanceListenerInstanceCreatedParams other = (InstanceListenerInstanceCreatedParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.instance, other.instance))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(instance);
    
            return result;
        }
    }



    
    static final class InstanceListenerInstanceDestroyedParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public int id;
    
    
    
        private InstanceListenerInstanceDestroyedParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public InstanceListenerInstanceDestroyedParams() {
            this(0);
        }
    
        public static InstanceListenerInstanceDestroyedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static InstanceListenerInstanceDestroyedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            InstanceListenerInstanceDestroyedParams result = new InstanceListenerInstanceDestroyedParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.id = decoder0.readInt(8);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(id, 8);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            InstanceListenerInstanceDestroyedParams other = (InstanceListenerInstanceDestroyedParams) object;
    
            if (this.id != other.id)
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(id);
    
            return result;
        }
    }



    
    static final class InstanceListenerInstancePidAvailableParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public int id;
    
        public int pid;
    
    
    
        private InstanceListenerInstancePidAvailableParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
    
    
        }
    
        public InstanceListenerInstancePidAvailableParams() {
            this(0);
        }
    
        public static InstanceListenerInstancePidAvailableParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static InstanceListenerInstancePidAvailableParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            InstanceListenerInstancePidAvailableParams result = new InstanceListenerInstancePidAvailableParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.id = decoder0.readInt(8);
                
            }
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.pid = decoder0.readInt(12);
                
            }
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(id, 8);
            
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(pid, 12);
            
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            InstanceListenerInstancePidAvailableParams other = (InstanceListenerInstancePidAvailableParams) object;
    
            if (this.id != other.id)
                return false;
    
            if (this.pid != other.pid)
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(id);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(pid);
    
            return result;
        }
    }



}
