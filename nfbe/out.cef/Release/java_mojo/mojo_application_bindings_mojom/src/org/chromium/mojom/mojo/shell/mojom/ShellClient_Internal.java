
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/shell/public/interfaces/shell_client.mojom
//

package org.chromium.mojom.mojo.shell.mojom;

import org.chromium.base.annotations.SuppressFBWarnings;


class ShellClient_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<ShellClient, ShellClient.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<ShellClient, ShellClient.Proxy>() {
    
        public String getName() {
            return "mojo::shell::mojom::ShellClient";
        }
    
        public int getVersion() {
          return 0;
        }
    
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }
    
        public Stub buildStub(org.chromium.mojo.system.Core core, ShellClient impl) {
            return new Stub(core, impl);
        }
    
        public ShellClient[] buildArray(int size) {
          return new ShellClient[size];
        }
    };


    private static final int INITIALIZE_ORDINAL = 0;

    private static final int ACCEPT_CONNECTION_ORDINAL = 1;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements ShellClient.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void initialize(
Identity identity, int id, 
InitializeResponse callback) {

            ShellClientInitializeParams _message = new ShellClientInitializeParams();

            _message.identity = identity;

            _message.id = id;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    INITIALIZE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new ShellClientInitializeResponseParamsForwardToCallback(callback));

        }


        @Override
        public void acceptConnection(
Identity source, int sourceId, org.chromium.mojo.bindings.InterfaceRequest<InterfaceProvider> localInterfaces, InterfaceProvider remoteInterfaces, CapabilityRequest allowedCapabilities, String resolvedName) {

            ShellClientAcceptConnectionParams _message = new ShellClientAcceptConnectionParams();

            _message.source = source;

            _message.sourceId = sourceId;

            _message.localInterfaces = localInterfaces;

            _message.remoteInterfaces = remoteInterfaces;

            _message.allowedCapabilities = allowedCapabilities;

            _message.resolvedName = resolvedName;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ACCEPT_CONNECTION_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<ShellClient> {

        Stub(org.chromium.mojo.system.Core core, ShellClient impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                ShellClient_Internal.MANAGER, messageWithHeader);
            
            
            
            
            
            
            
                    case ACCEPT_CONNECTION_ORDINAL: {
            
                        ShellClientAcceptConnectionParams data =
                                ShellClientAcceptConnectionParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().acceptConnection(data.source, data.sourceId, data.localInterfaces, data.remoteInterfaces, data.allowedCapabilities, data.resolvedName);
                        return true;
                    }
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), ShellClient_Internal.MANAGER, messageWithHeader, receiver);
            
            
            
            
            
            
            
                    case INITIALIZE_ORDINAL: {
            
                        ShellClientInitializeParams data =
                                ShellClientInitializeParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().initialize(data.identity, data.id, new ShellClientInitializeResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class ShellClientInitializeParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public Identity identity;
    
        public int id;
    
    
    
        private ShellClientInitializeParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
    
    
        }
    
        public ShellClientInitializeParams() {
            this(0);
        }
    
        public static ShellClientInitializeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static ShellClientInitializeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            ShellClientInitializeParams result = new ShellClientInitializeParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                
                result.identity = Identity.decode(decoder1);
                
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.id = decoder0.readInt(16);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(identity, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(id, 16);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            ShellClientInitializeParams other = (ShellClientInitializeParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.identity, other.identity))
                return false;
    
            if (this.id != other.id)
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(identity);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(id);
    
            return result;
        }
    }



    
    static final class ShellClientInitializeResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public org.chromium.mojo.bindings.InterfaceRequest<Connector> connectorRequest;
    
    
    
        private ShellClientInitializeResponseParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public ShellClientInitializeResponseParams() {
            this(0);
        }
    
        public static ShellClientInitializeResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static ShellClientInitializeResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            ShellClientInitializeResponseParams result = new ShellClientInitializeResponseParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.connectorRequest = decoder0.readInterfaceRequest(8, true);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(connectorRequest, 8, true);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            ShellClientInitializeResponseParams other = (ShellClientInitializeResponseParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.connectorRequest, other.connectorRequest))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(connectorRequest);
    
            return result;
        }
    }

    static class ShellClientInitializeResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final ShellClient.InitializeResponse mCallback;

        ShellClientInitializeResponseParamsForwardToCallback(ShellClient.InitializeResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(INITIALIZE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                ShellClientInitializeResponseParams response = ShellClientInitializeResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.connectorRequest);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class ShellClientInitializeResponseParamsProxyToResponder implements ShellClient.InitializeResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        ShellClientInitializeResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(org.chromium.mojo.bindings.InterfaceRequest<Connector> connectorRequest) {
            ShellClientInitializeResponseParams _response = new ShellClientInitializeResponseParams();

            _response.connectorRequest = connectorRequest;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    INITIALIZE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class ShellClientAcceptConnectionParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public Identity source;
    
        public int sourceId;
    
        public org.chromium.mojo.bindings.InterfaceRequest<InterfaceProvider> localInterfaces;
    
        public InterfaceProvider remoteInterfaces;
    
        public CapabilityRequest allowedCapabilities;
    
        public String resolvedName;
    
    
    
        private ShellClientAcceptConnectionParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        public ShellClientAcceptConnectionParams() {
            this(0);
        }
    
        public static ShellClientAcceptConnectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static ShellClientAcceptConnectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            ShellClientAcceptConnectionParams result = new ShellClientAcceptConnectionParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                
                result.source = Identity.decode(decoder1);
                
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.sourceId = decoder0.readInt(16);
                
            }
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.localInterfaces = decoder0.readInterfaceRequest(20, true);
                
            }
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.remoteInterfaces = decoder0.readServiceInterface(24, true, InterfaceProvider.MANAGER);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                
                result.allowedCapabilities = CapabilityRequest.decode(decoder1);
                
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.resolvedName = decoder0.readString(40, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(source, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(sourceId, 16);
            
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(localInterfaces, 20, true);
            
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(remoteInterfaces, 24, true, InterfaceProvider.MANAGER);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(allowedCapabilities, 32, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(resolvedName, 40, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            ShellClientAcceptConnectionParams other = (ShellClientAcceptConnectionParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.source, other.source))
                return false;
    
            if (this.sourceId != other.sourceId)
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.localInterfaces, other.localInterfaces))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.remoteInterfaces, other.remoteInterfaces))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.allowedCapabilities, other.allowedCapabilities))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.resolvedName, other.resolvedName))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(source);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(sourceId);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(localInterfaces);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(remoteInterfaces);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(allowedCapabilities);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(resolvedName);
    
            return result;
        }
    }



}
