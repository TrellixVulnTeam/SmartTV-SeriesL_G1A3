
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     components/leveldb/public/interfaces/leveldb.mojom
//

package org.chromium.mojom.leveldb;

import org.chromium.base.annotations.SuppressFBWarnings;


public final class OpenOptions extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];





    public boolean createIfMissing;

    public boolean errorIfExists;

    public boolean paranoidChecks;

    public long writeBufferSize;

    public int maxOpenFiles;



    private OpenOptions(int version) {
        super(STRUCT_SIZE, version);


        createIfMissing = (boolean) false;



        errorIfExists = (boolean) false;



        paranoidChecks = (boolean) false;



        writeBufferSize = (long) 4194304L;



        maxOpenFiles = (int) 80L;


    }

    public OpenOptions() {
        this(0);
    }

    public static OpenOptions deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    @SuppressWarnings("unchecked")
    public static OpenOptions decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        OpenOptions result = new OpenOptions(mainDataHeader.elementsOrVersion);


        if (mainDataHeader.elementsOrVersion >= 0) {
            
            
            result.createIfMissing = decoder0.readBoolean(8, 0);
            
        }

        if (mainDataHeader.elementsOrVersion >= 0) {
            
            
            result.errorIfExists = decoder0.readBoolean(8, 1);
            
        }

        if (mainDataHeader.elementsOrVersion >= 0) {
            
            
            result.paranoidChecks = decoder0.readBoolean(8, 2);
            
        }









        if (mainDataHeader.elementsOrVersion >= 0) {
            
            
            result.maxOpenFiles = decoder0.readInt(12);
            
        }









        if (mainDataHeader.elementsOrVersion >= 0) {
            
            
            result.writeBufferSize = decoder0.readLong(16);
            
        }
















        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {

        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);



        
        
        encoder0.encode(createIfMissing, 8, 0);
        

        
        
        encoder0.encode(errorIfExists, 8, 1);
        

        
        
        encoder0.encode(paranoidChecks, 8, 2);
        









        
        
        encoder0.encode(maxOpenFiles, 12);
        









        
        
        encoder0.encode(writeBufferSize, 16);
        
















    }

    /**
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(Object object) {
        if (object == this)
            return true;
        if (object == null)
            return false;
        if (getClass() != object.getClass())
            return false;

        OpenOptions other = (OpenOptions) object;

        if (this.createIfMissing != other.createIfMissing)
            return false;

        if (this.errorIfExists != other.errorIfExists)
            return false;

        if (this.paranoidChecks != other.paranoidChecks)
            return false;

        if (this.writeBufferSize != other.writeBufferSize)
            return false;

        if (this.maxOpenFiles != other.maxOpenFiles)
            return false;


        return true;
    }

    /**
     * @see Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = prime + getClass().hashCode();

        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(createIfMissing);

        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(errorIfExists);

        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(paranoidChecks);

        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(writeBufferSize);

        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(maxOpenFiles);

        return result;
    }
}
