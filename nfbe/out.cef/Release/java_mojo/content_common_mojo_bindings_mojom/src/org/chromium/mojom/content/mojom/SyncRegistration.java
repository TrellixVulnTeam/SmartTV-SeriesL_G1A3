
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     content/public/common/background_sync.mojom
//

package org.chromium.mojom.content.mojom;

import org.chromium.base.annotations.SuppressFBWarnings;


public final class SyncRegistration extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 32;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];





    public long id;

    public String tag;

    public int networkState;



    private SyncRegistration(int version) {
        super(STRUCT_SIZE, version);


        id = (long) -1L;



        tag = (String) "";



        networkState = (int) BackgroundSyncNetworkState.ONLINE;


    }

    public SyncRegistration() {
        this(0);
    }

    public static SyncRegistration deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    @SuppressWarnings("unchecked")
    public static SyncRegistration decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
        SyncRegistration result = new SyncRegistration(mainDataHeader.elementsOrVersion);


        if (mainDataHeader.elementsOrVersion >= 0) {
            
            
            result.id = decoder0.readLong(8);
            
        }

















        if (mainDataHeader.elementsOrVersion >= 0) {
            
            
            result.tag = decoder0.readString(16, false);
            
        }

















        if (mainDataHeader.elementsOrVersion >= 0) {
            
            
            result.networkState = decoder0.readInt(24);
            
        }
















        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {

        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);



        
        
        encoder0.encode(id, 8);
        

















        
        
        encoder0.encode(tag, 16, false);
        

















        
        
        encoder0.encode(networkState, 24);
        
















    }

    /**
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(Object object) {
        if (object == this)
            return true;
        if (object == null)
            return false;
        if (getClass() != object.getClass())
            return false;

        SyncRegistration other = (SyncRegistration) object;

        if (this.id != other.id)
            return false;

        if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.tag, other.tag))
            return false;

        if (this.networkState != other.networkState)
            return false;


        return true;
    }

    /**
     * @see Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = prime + getClass().hashCode();

        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(id);

        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(tag);

        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(networkState);

        return result;
    }
}
