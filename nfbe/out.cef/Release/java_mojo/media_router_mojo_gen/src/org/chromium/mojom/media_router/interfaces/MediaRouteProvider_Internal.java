
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     chrome/browser/media/router/mojo/media_router.mojom
//

package org.chromium.mojom.media_router.interfaces;

import org.chromium.base.annotations.SuppressFBWarnings;


class MediaRouteProvider_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<MediaRouteProvider, MediaRouteProvider.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<MediaRouteProvider, MediaRouteProvider.Proxy>() {
    
        public String getName() {
            return "media_router::interfaces::MediaRouteProvider";
        }
    
        public int getVersion() {
          return 0;
        }
    
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }
    
        public Stub buildStub(org.chromium.mojo.system.Core core, MediaRouteProvider impl) {
            return new Stub(core, impl);
        }
    
        public MediaRouteProvider[] buildArray(int size) {
          return new MediaRouteProvider[size];
        }
    };


    private static final int CREATE_ROUTE_ORDINAL = 0;

    private static final int JOIN_ROUTE_ORDINAL = 1;

    private static final int CONNECT_ROUTE_BY_ROUTE_ID_ORDINAL = 2;

    private static final int TERMINATE_ROUTE_ORDINAL = 3;

    private static final int SEND_ROUTE_MESSAGE_ORDINAL = 4;

    private static final int SEND_ROUTE_BINARY_MESSAGE_ORDINAL = 5;

    private static final int START_OBSERVING_MEDIA_SINKS_ORDINAL = 6;

    private static final int STOP_OBSERVING_MEDIA_SINKS_ORDINAL = 7;

    private static final int START_OBSERVING_MEDIA_ROUTES_ORDINAL = 8;

    private static final int STOP_OBSERVING_MEDIA_ROUTES_ORDINAL = 9;

    private static final int LISTEN_FOR_ROUTE_MESSAGES_ORDINAL = 10;

    private static final int STOP_LISTENING_FOR_ROUTE_MESSAGES_ORDINAL = 11;

    private static final int DETACH_ROUTE_ORDINAL = 12;

    private static final int ENABLE_MDNS_DISCOVERY_ORDINAL = 13;

    private static final int UPDATE_MEDIA_SINKS_ORDINAL = 14;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements MediaRouteProvider.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void createRoute(
String mediaSource, String sinkId, String originalPresentationId, String origin, int tabId, long timeoutMillis, boolean offTheRecord, 
CreateRouteResponse callback) {

            MediaRouteProviderCreateRouteParams _message = new MediaRouteProviderCreateRouteParams();

            _message.mediaSource = mediaSource;

            _message.sinkId = sinkId;

            _message.originalPresentationId = originalPresentationId;

            _message.origin = origin;

            _message.tabId = tabId;

            _message.timeoutMillis = timeoutMillis;

            _message.offTheRecord = offTheRecord;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_ROUTE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new MediaRouteProviderCreateRouteResponseParamsForwardToCallback(callback));

        }


        @Override
        public void joinRoute(
String mediaSource, String presentationId, String origin, int tabId, long timeoutMillis, boolean offTheRecord, 
JoinRouteResponse callback) {

            MediaRouteProviderJoinRouteParams _message = new MediaRouteProviderJoinRouteParams();

            _message.mediaSource = mediaSource;

            _message.presentationId = presentationId;

            _message.origin = origin;

            _message.tabId = tabId;

            _message.timeoutMillis = timeoutMillis;

            _message.offTheRecord = offTheRecord;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    JOIN_ROUTE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new MediaRouteProviderJoinRouteResponseParamsForwardToCallback(callback));

        }


        @Override
        public void connectRouteByRouteId(
String mediaSource, String routeId, String presentationId, String origin, int tabId, long timeoutMillis, boolean offTheRecord, 
ConnectRouteByRouteIdResponse callback) {

            MediaRouteProviderConnectRouteByRouteIdParams _message = new MediaRouteProviderConnectRouteByRouteIdParams();

            _message.mediaSource = mediaSource;

            _message.routeId = routeId;

            _message.presentationId = presentationId;

            _message.origin = origin;

            _message.tabId = tabId;

            _message.timeoutMillis = timeoutMillis;

            _message.offTheRecord = offTheRecord;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CONNECT_ROUTE_BY_ROUTE_ID_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new MediaRouteProviderConnectRouteByRouteIdResponseParamsForwardToCallback(callback));

        }


        @Override
        public void terminateRoute(
String routeId) {

            MediaRouteProviderTerminateRouteParams _message = new MediaRouteProviderTerminateRouteParams();

            _message.routeId = routeId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(TERMINATE_ROUTE_ORDINAL)));

        }


        @Override
        public void sendRouteMessage(
String mediaRouteId, String message, 
SendRouteMessageResponse callback) {

            MediaRouteProviderSendRouteMessageParams _message = new MediaRouteProviderSendRouteMessageParams();

            _message.mediaRouteId = mediaRouteId;

            _message.message = message;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SEND_ROUTE_MESSAGE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new MediaRouteProviderSendRouteMessageResponseParamsForwardToCallback(callback));

        }


        @Override
        public void sendRouteBinaryMessage(
String mediaRouteId, byte[] data, 
SendRouteBinaryMessageResponse callback) {

            MediaRouteProviderSendRouteBinaryMessageParams _message = new MediaRouteProviderSendRouteBinaryMessageParams();

            _message.mediaRouteId = mediaRouteId;

            _message.data = data;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SEND_ROUTE_BINARY_MESSAGE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new MediaRouteProviderSendRouteBinaryMessageResponseParamsForwardToCallback(callback));

        }


        @Override
        public void startObservingMediaSinks(
String mediaSource) {

            MediaRouteProviderStartObservingMediaSinksParams _message = new MediaRouteProviderStartObservingMediaSinksParams();

            _message.mediaSource = mediaSource;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(START_OBSERVING_MEDIA_SINKS_ORDINAL)));

        }


        @Override
        public void stopObservingMediaSinks(
String mediaSource) {

            MediaRouteProviderStopObservingMediaSinksParams _message = new MediaRouteProviderStopObservingMediaSinksParams();

            _message.mediaSource = mediaSource;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(STOP_OBSERVING_MEDIA_SINKS_ORDINAL)));

        }


        @Override
        public void startObservingMediaRoutes(
String mediaSource) {

            MediaRouteProviderStartObservingMediaRoutesParams _message = new MediaRouteProviderStartObservingMediaRoutesParams();

            _message.mediaSource = mediaSource;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(START_OBSERVING_MEDIA_ROUTES_ORDINAL)));

        }


        @Override
        public void stopObservingMediaRoutes(
String mediaSource) {

            MediaRouteProviderStopObservingMediaRoutesParams _message = new MediaRouteProviderStopObservingMediaRoutesParams();

            _message.mediaSource = mediaSource;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(STOP_OBSERVING_MEDIA_ROUTES_ORDINAL)));

        }


        @Override
        public void listenForRouteMessages(
String routeId, 
ListenForRouteMessagesResponse callback) {

            MediaRouteProviderListenForRouteMessagesParams _message = new MediaRouteProviderListenForRouteMessagesParams();

            _message.routeId = routeId;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    LISTEN_FOR_ROUTE_MESSAGES_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new MediaRouteProviderListenForRouteMessagesResponseParamsForwardToCallback(callback));

        }


        @Override
        public void stopListeningForRouteMessages(
String routeId) {

            MediaRouteProviderStopListeningForRouteMessagesParams _message = new MediaRouteProviderStopListeningForRouteMessagesParams();

            _message.routeId = routeId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(STOP_LISTENING_FOR_ROUTE_MESSAGES_ORDINAL)));

        }


        @Override
        public void detachRoute(
String routeId) {

            MediaRouteProviderDetachRouteParams _message = new MediaRouteProviderDetachRouteParams();

            _message.routeId = routeId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DETACH_ROUTE_ORDINAL)));

        }


        @Override
        public void enableMdnsDiscovery(
) {

            MediaRouteProviderEnableMdnsDiscoveryParams _message = new MediaRouteProviderEnableMdnsDiscoveryParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENABLE_MDNS_DISCOVERY_ORDINAL)));

        }


        @Override
        public void updateMediaSinks(
String mediaSource) {

            MediaRouteProviderUpdateMediaSinksParams _message = new MediaRouteProviderUpdateMediaSinksParams();

            _message.mediaSource = mediaSource;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_MEDIA_SINKS_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<MediaRouteProvider> {

        Stub(org.chromium.mojo.system.Core core, MediaRouteProvider impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                MediaRouteProvider_Internal.MANAGER, messageWithHeader);
            
            
            
            
            
            
            
            
            
            
            
                    case TERMINATE_ROUTE_ORDINAL: {
            
                        MediaRouteProviderTerminateRouteParams data =
                                MediaRouteProviderTerminateRouteParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().terminateRoute(data.routeId);
                        return true;
                    }
            
            
            
            
            
            
            
            
            
                    case START_OBSERVING_MEDIA_SINKS_ORDINAL: {
            
                        MediaRouteProviderStartObservingMediaSinksParams data =
                                MediaRouteProviderStartObservingMediaSinksParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().startObservingMediaSinks(data.mediaSource);
                        return true;
                    }
            
            
            
            
            
                    case STOP_OBSERVING_MEDIA_SINKS_ORDINAL: {
            
                        MediaRouteProviderStopObservingMediaSinksParams data =
                                MediaRouteProviderStopObservingMediaSinksParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().stopObservingMediaSinks(data.mediaSource);
                        return true;
                    }
            
            
            
            
            
                    case START_OBSERVING_MEDIA_ROUTES_ORDINAL: {
            
                        MediaRouteProviderStartObservingMediaRoutesParams data =
                                MediaRouteProviderStartObservingMediaRoutesParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().startObservingMediaRoutes(data.mediaSource);
                        return true;
                    }
            
            
            
            
            
                    case STOP_OBSERVING_MEDIA_ROUTES_ORDINAL: {
            
                        MediaRouteProviderStopObservingMediaRoutesParams data =
                                MediaRouteProviderStopObservingMediaRoutesParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().stopObservingMediaRoutes(data.mediaSource);
                        return true;
                    }
            
            
            
            
            
            
            
                    case STOP_LISTENING_FOR_ROUTE_MESSAGES_ORDINAL: {
            
                        MediaRouteProviderStopListeningForRouteMessagesParams data =
                                MediaRouteProviderStopListeningForRouteMessagesParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().stopListeningForRouteMessages(data.routeId);
                        return true;
                    }
            
            
            
            
            
                    case DETACH_ROUTE_ORDINAL: {
            
                        MediaRouteProviderDetachRouteParams data =
                                MediaRouteProviderDetachRouteParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().detachRoute(data.routeId);
                        return true;
                    }
            
            
            
            
            
                    case ENABLE_MDNS_DISCOVERY_ORDINAL: {
            
                        MediaRouteProviderEnableMdnsDiscoveryParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().enableMdnsDiscovery();
                        return true;
                    }
            
            
            
            
            
                    case UPDATE_MEDIA_SINKS_ORDINAL: {
            
                        MediaRouteProviderUpdateMediaSinksParams data =
                                MediaRouteProviderUpdateMediaSinksParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().updateMediaSinks(data.mediaSource);
                        return true;
                    }
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), MediaRouteProvider_Internal.MANAGER, messageWithHeader, receiver);
            
            
            
            
            
            
            
                    case CREATE_ROUTE_ORDINAL: {
            
                        MediaRouteProviderCreateRouteParams data =
                                MediaRouteProviderCreateRouteParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().createRoute(data.mediaSource, data.sinkId, data.originalPresentationId, data.origin, data.tabId, data.timeoutMillis, data.offTheRecord, new MediaRouteProviderCreateRouteResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
            
            
            
            
            
                    case JOIN_ROUTE_ORDINAL: {
            
                        MediaRouteProviderJoinRouteParams data =
                                MediaRouteProviderJoinRouteParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().joinRoute(data.mediaSource, data.presentationId, data.origin, data.tabId, data.timeoutMillis, data.offTheRecord, new MediaRouteProviderJoinRouteResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
            
            
            
            
            
                    case CONNECT_ROUTE_BY_ROUTE_ID_ORDINAL: {
            
                        MediaRouteProviderConnectRouteByRouteIdParams data =
                                MediaRouteProviderConnectRouteByRouteIdParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().connectRouteByRouteId(data.mediaSource, data.routeId, data.presentationId, data.origin, data.tabId, data.timeoutMillis, data.offTheRecord, new MediaRouteProviderConnectRouteByRouteIdResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
            
            
            
            
            
            
            
                    case SEND_ROUTE_MESSAGE_ORDINAL: {
            
                        MediaRouteProviderSendRouteMessageParams data =
                                MediaRouteProviderSendRouteMessageParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().sendRouteMessage(data.mediaRouteId, data.message, new MediaRouteProviderSendRouteMessageResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
            
            
            
            
            
                    case SEND_ROUTE_BINARY_MESSAGE_ORDINAL: {
            
                        MediaRouteProviderSendRouteBinaryMessageParams data =
                                MediaRouteProviderSendRouteBinaryMessageParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().sendRouteBinaryMessage(data.mediaRouteId, data.data, new MediaRouteProviderSendRouteBinaryMessageResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
                    case LISTEN_FOR_ROUTE_MESSAGES_ORDINAL: {
            
                        MediaRouteProviderListenForRouteMessagesParams data =
                                MediaRouteProviderListenForRouteMessagesParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().listenForRouteMessages(data.routeId, new MediaRouteProviderListenForRouteMessagesResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
            
            
            
            
            
            
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class MediaRouteProviderCreateRouteParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String mediaSource;
    
        public String sinkId;
    
        public String originalPresentationId;
    
        public String origin;
    
        public int tabId;
    
        public long timeoutMillis;
    
        public boolean offTheRecord;
    
    
    
        private MediaRouteProviderCreateRouteParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        public MediaRouteProviderCreateRouteParams() {
            this(0);
        }
    
        public static MediaRouteProviderCreateRouteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderCreateRouteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderCreateRouteParams result = new MediaRouteProviderCreateRouteParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.mediaSource = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.sinkId = decoder0.readString(16, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.originalPresentationId = decoder0.readString(24, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.origin = decoder0.readString(32, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.tabId = decoder0.readInt(40);
                
            }
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.offTheRecord = decoder0.readBoolean(44, 0);
                
            }
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.timeoutMillis = decoder0.readLong(48);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(mediaSource, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(sinkId, 16, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(originalPresentationId, 24, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(origin, 32, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(tabId, 40);
            
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(offTheRecord, 44, 0);
            
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(timeoutMillis, 48);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderCreateRouteParams other = (MediaRouteProviderCreateRouteParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.mediaSource, other.mediaSource))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.sinkId, other.sinkId))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.originalPresentationId, other.originalPresentationId))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.origin, other.origin))
                return false;
    
            if (this.tabId != other.tabId)
                return false;
    
            if (this.timeoutMillis != other.timeoutMillis)
                return false;
    
            if (this.offTheRecord != other.offTheRecord)
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(mediaSource);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(sinkId);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(originalPresentationId);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(origin);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(tabId);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(timeoutMillis);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(offTheRecord);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderCreateRouteResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public MediaRoute route;
    
        public String errorText;
    
        public int resultCode;
    
    
    
        private MediaRouteProviderCreateRouteResponseParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
    
    
    
    
        }
    
        public MediaRouteProviderCreateRouteResponseParams() {
            this(0);
        }
    
        public static MediaRouteProviderCreateRouteResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderCreateRouteResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderCreateRouteResponseParams result = new MediaRouteProviderCreateRouteResponseParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                
                result.route = MediaRoute.decode(decoder1);
                
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.errorText = decoder0.readString(16, true);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.resultCode = decoder0.readInt(24);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(route, 8, true);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(errorText, 16, true);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(resultCode, 24);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderCreateRouteResponseParams other = (MediaRouteProviderCreateRouteResponseParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.route, other.route))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.errorText, other.errorText))
                return false;
    
            if (this.resultCode != other.resultCode)
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(route);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(errorText);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(resultCode);
    
            return result;
        }
    }

    static class MediaRouteProviderCreateRouteResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final MediaRouteProvider.CreateRouteResponse mCallback;

        MediaRouteProviderCreateRouteResponseParamsForwardToCallback(MediaRouteProvider.CreateRouteResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_ROUTE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                MediaRouteProviderCreateRouteResponseParams response = MediaRouteProviderCreateRouteResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.route, response.errorText, response.resultCode);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class MediaRouteProviderCreateRouteResponseParamsProxyToResponder implements MediaRouteProvider.CreateRouteResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        MediaRouteProviderCreateRouteResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(MediaRoute route, String errorText, Integer resultCode) {
            MediaRouteProviderCreateRouteResponseParams _response = new MediaRouteProviderCreateRouteResponseParams();

            _response.route = route;

            _response.errorText = errorText;

            _response.resultCode = resultCode;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_ROUTE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class MediaRouteProviderJoinRouteParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String mediaSource;
    
        public String presentationId;
    
        public String origin;
    
        public int tabId;
    
        public long timeoutMillis;
    
        public boolean offTheRecord;
    
    
    
        private MediaRouteProviderJoinRouteParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        public MediaRouteProviderJoinRouteParams() {
            this(0);
        }
    
        public static MediaRouteProviderJoinRouteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderJoinRouteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderJoinRouteParams result = new MediaRouteProviderJoinRouteParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.mediaSource = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.presentationId = decoder0.readString(16, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.origin = decoder0.readString(24, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.tabId = decoder0.readInt(32);
                
            }
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.offTheRecord = decoder0.readBoolean(36, 0);
                
            }
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.timeoutMillis = decoder0.readLong(40);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(mediaSource, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(presentationId, 16, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(origin, 24, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(tabId, 32);
            
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(offTheRecord, 36, 0);
            
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(timeoutMillis, 40);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderJoinRouteParams other = (MediaRouteProviderJoinRouteParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.mediaSource, other.mediaSource))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.presentationId, other.presentationId))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.origin, other.origin))
                return false;
    
            if (this.tabId != other.tabId)
                return false;
    
            if (this.timeoutMillis != other.timeoutMillis)
                return false;
    
            if (this.offTheRecord != other.offTheRecord)
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(mediaSource);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(presentationId);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(origin);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(tabId);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(timeoutMillis);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(offTheRecord);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderJoinRouteResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public MediaRoute route;
    
        public String errorText;
    
        public int resultCode;
    
    
    
        private MediaRouteProviderJoinRouteResponseParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
    
    
    
    
        }
    
        public MediaRouteProviderJoinRouteResponseParams() {
            this(0);
        }
    
        public static MediaRouteProviderJoinRouteResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderJoinRouteResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderJoinRouteResponseParams result = new MediaRouteProviderJoinRouteResponseParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                
                result.route = MediaRoute.decode(decoder1);
                
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.errorText = decoder0.readString(16, true);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.resultCode = decoder0.readInt(24);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(route, 8, true);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(errorText, 16, true);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(resultCode, 24);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderJoinRouteResponseParams other = (MediaRouteProviderJoinRouteResponseParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.route, other.route))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.errorText, other.errorText))
                return false;
    
            if (this.resultCode != other.resultCode)
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(route);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(errorText);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(resultCode);
    
            return result;
        }
    }

    static class MediaRouteProviderJoinRouteResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final MediaRouteProvider.JoinRouteResponse mCallback;

        MediaRouteProviderJoinRouteResponseParamsForwardToCallback(MediaRouteProvider.JoinRouteResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(JOIN_ROUTE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                MediaRouteProviderJoinRouteResponseParams response = MediaRouteProviderJoinRouteResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.route, response.errorText, response.resultCode);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class MediaRouteProviderJoinRouteResponseParamsProxyToResponder implements MediaRouteProvider.JoinRouteResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        MediaRouteProviderJoinRouteResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(MediaRoute route, String errorText, Integer resultCode) {
            MediaRouteProviderJoinRouteResponseParams _response = new MediaRouteProviderJoinRouteResponseParams();

            _response.route = route;

            _response.errorText = errorText;

            _response.resultCode = resultCode;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    JOIN_ROUTE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class MediaRouteProviderConnectRouteByRouteIdParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String mediaSource;
    
        public String routeId;
    
        public String presentationId;
    
        public String origin;
    
        public int tabId;
    
        public long timeoutMillis;
    
        public boolean offTheRecord;
    
    
    
        private MediaRouteProviderConnectRouteByRouteIdParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        public MediaRouteProviderConnectRouteByRouteIdParams() {
            this(0);
        }
    
        public static MediaRouteProviderConnectRouteByRouteIdParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderConnectRouteByRouteIdParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderConnectRouteByRouteIdParams result = new MediaRouteProviderConnectRouteByRouteIdParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.mediaSource = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.routeId = decoder0.readString(16, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.presentationId = decoder0.readString(24, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.origin = decoder0.readString(32, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.tabId = decoder0.readInt(40);
                
            }
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.offTheRecord = decoder0.readBoolean(44, 0);
                
            }
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.timeoutMillis = decoder0.readLong(48);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(mediaSource, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(routeId, 16, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(presentationId, 24, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(origin, 32, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(tabId, 40);
            
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(offTheRecord, 44, 0);
            
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(timeoutMillis, 48);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderConnectRouteByRouteIdParams other = (MediaRouteProviderConnectRouteByRouteIdParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.mediaSource, other.mediaSource))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.routeId, other.routeId))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.presentationId, other.presentationId))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.origin, other.origin))
                return false;
    
            if (this.tabId != other.tabId)
                return false;
    
            if (this.timeoutMillis != other.timeoutMillis)
                return false;
    
            if (this.offTheRecord != other.offTheRecord)
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(mediaSource);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(routeId);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(presentationId);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(origin);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(tabId);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(timeoutMillis);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(offTheRecord);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderConnectRouteByRouteIdResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public MediaRoute route;
    
        public String errorText;
    
        public int resultCode;
    
    
    
        private MediaRouteProviderConnectRouteByRouteIdResponseParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
    
    
    
    
        }
    
        public MediaRouteProviderConnectRouteByRouteIdResponseParams() {
            this(0);
        }
    
        public static MediaRouteProviderConnectRouteByRouteIdResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderConnectRouteByRouteIdResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderConnectRouteByRouteIdResponseParams result = new MediaRouteProviderConnectRouteByRouteIdResponseParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                
                result.route = MediaRoute.decode(decoder1);
                
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.errorText = decoder0.readString(16, true);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.resultCode = decoder0.readInt(24);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(route, 8, true);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(errorText, 16, true);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(resultCode, 24);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderConnectRouteByRouteIdResponseParams other = (MediaRouteProviderConnectRouteByRouteIdResponseParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.route, other.route))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.errorText, other.errorText))
                return false;
    
            if (this.resultCode != other.resultCode)
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(route);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(errorText);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(resultCode);
    
            return result;
        }
    }

    static class MediaRouteProviderConnectRouteByRouteIdResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final MediaRouteProvider.ConnectRouteByRouteIdResponse mCallback;

        MediaRouteProviderConnectRouteByRouteIdResponseParamsForwardToCallback(MediaRouteProvider.ConnectRouteByRouteIdResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CONNECT_ROUTE_BY_ROUTE_ID_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                MediaRouteProviderConnectRouteByRouteIdResponseParams response = MediaRouteProviderConnectRouteByRouteIdResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.route, response.errorText, response.resultCode);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class MediaRouteProviderConnectRouteByRouteIdResponseParamsProxyToResponder implements MediaRouteProvider.ConnectRouteByRouteIdResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        MediaRouteProviderConnectRouteByRouteIdResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(MediaRoute route, String errorText, Integer resultCode) {
            MediaRouteProviderConnectRouteByRouteIdResponseParams _response = new MediaRouteProviderConnectRouteByRouteIdResponseParams();

            _response.route = route;

            _response.errorText = errorText;

            _response.resultCode = resultCode;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CONNECT_ROUTE_BY_ROUTE_ID_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class MediaRouteProviderTerminateRouteParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String routeId;
    
    
    
        private MediaRouteProviderTerminateRouteParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public MediaRouteProviderTerminateRouteParams() {
            this(0);
        }
    
        public static MediaRouteProviderTerminateRouteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderTerminateRouteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderTerminateRouteParams result = new MediaRouteProviderTerminateRouteParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.routeId = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(routeId, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderTerminateRouteParams other = (MediaRouteProviderTerminateRouteParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.routeId, other.routeId))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(routeId);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderSendRouteMessageParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String mediaRouteId;
    
        public String message;
    
    
    
        private MediaRouteProviderSendRouteMessageParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
    
    
        }
    
        public MediaRouteProviderSendRouteMessageParams() {
            this(0);
        }
    
        public static MediaRouteProviderSendRouteMessageParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderSendRouteMessageParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderSendRouteMessageParams result = new MediaRouteProviderSendRouteMessageParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.mediaRouteId = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.message = decoder0.readString(16, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(mediaRouteId, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(message, 16, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderSendRouteMessageParams other = (MediaRouteProviderSendRouteMessageParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.mediaRouteId, other.mediaRouteId))
                return false;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.message, other.message))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(mediaRouteId);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(message);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderSendRouteMessageResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public boolean sent;
    
    
    
        private MediaRouteProviderSendRouteMessageResponseParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public MediaRouteProviderSendRouteMessageResponseParams() {
            this(0);
        }
    
        public static MediaRouteProviderSendRouteMessageResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderSendRouteMessageResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderSendRouteMessageResponseParams result = new MediaRouteProviderSendRouteMessageResponseParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.sent = decoder0.readBoolean(8, 0);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(sent, 8, 0);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderSendRouteMessageResponseParams other = (MediaRouteProviderSendRouteMessageResponseParams) object;
    
            if (this.sent != other.sent)
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(sent);
    
            return result;
        }
    }

    static class MediaRouteProviderSendRouteMessageResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final MediaRouteProvider.SendRouteMessageResponse mCallback;

        MediaRouteProviderSendRouteMessageResponseParamsForwardToCallback(MediaRouteProvider.SendRouteMessageResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SEND_ROUTE_MESSAGE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                MediaRouteProviderSendRouteMessageResponseParams response = MediaRouteProviderSendRouteMessageResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.sent);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class MediaRouteProviderSendRouteMessageResponseParamsProxyToResponder implements MediaRouteProvider.SendRouteMessageResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        MediaRouteProviderSendRouteMessageResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean sent) {
            MediaRouteProviderSendRouteMessageResponseParams _response = new MediaRouteProviderSendRouteMessageResponseParams();

            _response.sent = sent;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SEND_ROUTE_MESSAGE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class MediaRouteProviderSendRouteBinaryMessageParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String mediaRouteId;
    
        public byte[] data;
    
    
    
        private MediaRouteProviderSendRouteBinaryMessageParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
    
    
        }
    
        public MediaRouteProviderSendRouteBinaryMessageParams() {
            this(0);
        }
    
        public static MediaRouteProviderSendRouteBinaryMessageParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderSendRouteBinaryMessageParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderSendRouteBinaryMessageParams result = new MediaRouteProviderSendRouteBinaryMessageParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.mediaRouteId = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.data = decoder0.readBytes(16, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(mediaRouteId, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(data, 16, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderSendRouteBinaryMessageParams other = (MediaRouteProviderSendRouteBinaryMessageParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.mediaRouteId, other.mediaRouteId))
                return false;
    
            if (!java.util.Arrays.equals(this.data, other.data))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(mediaRouteId);
    
            result = prime * result + java.util.Arrays.hashCode(data);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderSendRouteBinaryMessageResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public boolean sent;
    
    
    
        private MediaRouteProviderSendRouteBinaryMessageResponseParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public MediaRouteProviderSendRouteBinaryMessageResponseParams() {
            this(0);
        }
    
        public static MediaRouteProviderSendRouteBinaryMessageResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderSendRouteBinaryMessageResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderSendRouteBinaryMessageResponseParams result = new MediaRouteProviderSendRouteBinaryMessageResponseParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.sent = decoder0.readBoolean(8, 0);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(sent, 8, 0);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderSendRouteBinaryMessageResponseParams other = (MediaRouteProviderSendRouteBinaryMessageResponseParams) object;
    
            if (this.sent != other.sent)
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(sent);
    
            return result;
        }
    }

    static class MediaRouteProviderSendRouteBinaryMessageResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final MediaRouteProvider.SendRouteBinaryMessageResponse mCallback;

        MediaRouteProviderSendRouteBinaryMessageResponseParamsForwardToCallback(MediaRouteProvider.SendRouteBinaryMessageResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SEND_ROUTE_BINARY_MESSAGE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                MediaRouteProviderSendRouteBinaryMessageResponseParams response = MediaRouteProviderSendRouteBinaryMessageResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.sent);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class MediaRouteProviderSendRouteBinaryMessageResponseParamsProxyToResponder implements MediaRouteProvider.SendRouteBinaryMessageResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        MediaRouteProviderSendRouteBinaryMessageResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean sent) {
            MediaRouteProviderSendRouteBinaryMessageResponseParams _response = new MediaRouteProviderSendRouteBinaryMessageResponseParams();

            _response.sent = sent;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SEND_ROUTE_BINARY_MESSAGE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class MediaRouteProviderStartObservingMediaSinksParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String mediaSource;
    
    
    
        private MediaRouteProviderStartObservingMediaSinksParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public MediaRouteProviderStartObservingMediaSinksParams() {
            this(0);
        }
    
        public static MediaRouteProviderStartObservingMediaSinksParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderStartObservingMediaSinksParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderStartObservingMediaSinksParams result = new MediaRouteProviderStartObservingMediaSinksParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.mediaSource = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(mediaSource, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderStartObservingMediaSinksParams other = (MediaRouteProviderStartObservingMediaSinksParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.mediaSource, other.mediaSource))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(mediaSource);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderStopObservingMediaSinksParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String mediaSource;
    
    
    
        private MediaRouteProviderStopObservingMediaSinksParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public MediaRouteProviderStopObservingMediaSinksParams() {
            this(0);
        }
    
        public static MediaRouteProviderStopObservingMediaSinksParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderStopObservingMediaSinksParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderStopObservingMediaSinksParams result = new MediaRouteProviderStopObservingMediaSinksParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.mediaSource = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(mediaSource, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderStopObservingMediaSinksParams other = (MediaRouteProviderStopObservingMediaSinksParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.mediaSource, other.mediaSource))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(mediaSource);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderStartObservingMediaRoutesParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String mediaSource;
    
    
    
        private MediaRouteProviderStartObservingMediaRoutesParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public MediaRouteProviderStartObservingMediaRoutesParams() {
            this(0);
        }
    
        public static MediaRouteProviderStartObservingMediaRoutesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderStartObservingMediaRoutesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderStartObservingMediaRoutesParams result = new MediaRouteProviderStartObservingMediaRoutesParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.mediaSource = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(mediaSource, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderStartObservingMediaRoutesParams other = (MediaRouteProviderStartObservingMediaRoutesParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.mediaSource, other.mediaSource))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(mediaSource);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderStopObservingMediaRoutesParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String mediaSource;
    
    
    
        private MediaRouteProviderStopObservingMediaRoutesParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public MediaRouteProviderStopObservingMediaRoutesParams() {
            this(0);
        }
    
        public static MediaRouteProviderStopObservingMediaRoutesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderStopObservingMediaRoutesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderStopObservingMediaRoutesParams result = new MediaRouteProviderStopObservingMediaRoutesParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.mediaSource = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(mediaSource, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderStopObservingMediaRoutesParams other = (MediaRouteProviderStopObservingMediaRoutesParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.mediaSource, other.mediaSource))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(mediaSource);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderListenForRouteMessagesParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String routeId;
    
    
    
        private MediaRouteProviderListenForRouteMessagesParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public MediaRouteProviderListenForRouteMessagesParams() {
            this(0);
        }
    
        public static MediaRouteProviderListenForRouteMessagesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderListenForRouteMessagesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderListenForRouteMessagesParams result = new MediaRouteProviderListenForRouteMessagesParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.routeId = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(routeId, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderListenForRouteMessagesParams other = (MediaRouteProviderListenForRouteMessagesParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.routeId, other.routeId))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(routeId);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderListenForRouteMessagesResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public RouteMessage[] messages;
    
        public boolean error;
    
    
    
        private MediaRouteProviderListenForRouteMessagesResponseParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
    
    
        }
    
        public MediaRouteProviderListenForRouteMessagesResponseParams() {
            this(0);
        }
    
        public static MediaRouteProviderListenForRouteMessagesResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderListenForRouteMessagesResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderListenForRouteMessagesResponseParams result = new MediaRouteProviderListenForRouteMessagesResponseParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                
                
                {
                
                
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.messages = new RouteMessage[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        
                        result.messages[i1] = RouteMessage.decode(decoder2);
                        
                        
                    }
                
                }
                
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.error = decoder0.readBoolean(16, 0);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            
            
            if (messages == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
            
            
            
            
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(messages.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < messages.length; ++i0) {
                    
                    
                    encoder1.encode(messages[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                    
                }
            }
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            encoder0.encode(error, 16, 0);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderListenForRouteMessagesResponseParams other = (MediaRouteProviderListenForRouteMessagesResponseParams) object;
    
            if (!java.util.Arrays.deepEquals(this.messages, other.messages))
                return false;
    
            if (this.error != other.error)
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + java.util.Arrays.deepHashCode(messages);
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(error);
    
            return result;
        }
    }

    static class MediaRouteProviderListenForRouteMessagesResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final MediaRouteProvider.ListenForRouteMessagesResponse mCallback;

        MediaRouteProviderListenForRouteMessagesResponseParamsForwardToCallback(MediaRouteProvider.ListenForRouteMessagesResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(LISTEN_FOR_ROUTE_MESSAGES_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                MediaRouteProviderListenForRouteMessagesResponseParams response = MediaRouteProviderListenForRouteMessagesResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.messages, response.error);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class MediaRouteProviderListenForRouteMessagesResponseParamsProxyToResponder implements MediaRouteProvider.ListenForRouteMessagesResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        MediaRouteProviderListenForRouteMessagesResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(RouteMessage[] messages, Boolean error) {
            MediaRouteProviderListenForRouteMessagesResponseParams _response = new MediaRouteProviderListenForRouteMessagesResponseParams();

            _response.messages = messages;

            _response.error = error;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    LISTEN_FOR_ROUTE_MESSAGES_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class MediaRouteProviderStopListeningForRouteMessagesParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String routeId;
    
    
    
        private MediaRouteProviderStopListeningForRouteMessagesParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public MediaRouteProviderStopListeningForRouteMessagesParams() {
            this(0);
        }
    
        public static MediaRouteProviderStopListeningForRouteMessagesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderStopListeningForRouteMessagesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderStopListeningForRouteMessagesParams result = new MediaRouteProviderStopListeningForRouteMessagesParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.routeId = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(routeId, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderStopListeningForRouteMessagesParams other = (MediaRouteProviderStopListeningForRouteMessagesParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.routeId, other.routeId))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(routeId);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderDetachRouteParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String routeId;
    
    
    
        private MediaRouteProviderDetachRouteParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public MediaRouteProviderDetachRouteParams() {
            this(0);
        }
    
        public static MediaRouteProviderDetachRouteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderDetachRouteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderDetachRouteParams result = new MediaRouteProviderDetachRouteParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.routeId = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(routeId, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderDetachRouteParams other = (MediaRouteProviderDetachRouteParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.routeId, other.routeId))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(routeId);
    
            return result;
        }
    }



    
    static final class MediaRouteProviderEnableMdnsDiscoveryParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
        private MediaRouteProviderEnableMdnsDiscoveryParams(int version) {
            super(STRUCT_SIZE, version);
    
        }
    
        public MediaRouteProviderEnableMdnsDiscoveryParams() {
            this(0);
        }
    
        public static MediaRouteProviderEnableMdnsDiscoveryParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderEnableMdnsDiscoveryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderEnableMdnsDiscoveryParams result = new MediaRouteProviderEnableMdnsDiscoveryParams(mainDataHeader.elementsOrVersion);
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            return result;
        }
    }



    
    static final class MediaRouteProviderUpdateMediaSinksParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
    
    
    
    
        public String mediaSource;
    
    
    
        private MediaRouteProviderUpdateMediaSinksParams(int version) {
            super(STRUCT_SIZE, version);
    
    
    
        }
    
        public MediaRouteProviderUpdateMediaSinksParams() {
            this(0);
        }
    
        public static MediaRouteProviderUpdateMediaSinksParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        @SuppressWarnings("unchecked")
        public static MediaRouteProviderUpdateMediaSinksParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            MediaRouteProviderUpdateMediaSinksParams result = new MediaRouteProviderUpdateMediaSinksParams(mainDataHeader.elementsOrVersion);
    
    
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                
                result.mediaSource = decoder0.readString(8, false);
                
            }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
    
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
    
    
    
            
            
            encoder0.encode(mediaSource, 8, false);
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
    
            MediaRouteProviderUpdateMediaSinksParams other = (MediaRouteProviderUpdateMediaSinksParams) object;
    
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.mediaSource, other.mediaSource))
                return false;
    
    
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
    
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(mediaSource);
    
            return result;
        }
    }



}
