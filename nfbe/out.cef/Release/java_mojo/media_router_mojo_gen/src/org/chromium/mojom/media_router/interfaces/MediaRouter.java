
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     chrome/browser/media/router/mojo/media_router.mojom
//

package org.chromium.mojom.media_router.interfaces;

import org.chromium.base.annotations.SuppressFBWarnings;


public interface MediaRouter extends org.chromium.mojo.bindings.Interface {



    public static final class SinkAvailability {
    
    
        public static final int UNAVAILABLE = 0;
    
        public static final int PER_SOURCE = UNAVAILABLE + 1;
    
        public static final int AVAILABLE = PER_SOURCE + 1;
    
    
        private SinkAvailability() {}
    
    }


    public static final class PresentationConnectionState {
    
    
        public static final int CONNECTING = 0;
    
        public static final int CONNECTED = CONNECTING + 1;
    
        public static final int CLOSED = CONNECTED + 1;
    
        public static final int TERMINATED = CLOSED + 1;
    
    
        private PresentationConnectionState() {}
    
    }


    public static final class PresentationConnectionCloseReason {
    
    
        public static final int CONNECTION_ERROR = 0;
    
        public static final int CLOSED = CONNECTION_ERROR + 1;
    
        public static final int WENT_AWAY = CLOSED + 1;
    
    
        private PresentationConnectionCloseReason() {}
    
    }


    public interface Proxy extends MediaRouter, org.chromium.mojo.bindings.Interface.Proxy {
    }

    Manager<MediaRouter, MediaRouter.Proxy> MANAGER = MediaRouter_Internal.MANAGER;


    void registerMediaRouteProvider(
MediaRouteProvider mediaRouterProvider, 
RegisterMediaRouteProviderResponse callback);

    interface RegisterMediaRouteProviderResponse extends org.chromium.mojo.bindings.Callbacks.Callback1<String> { }



    void onSinksReceived(
String mediaSource, MediaSink[] sinks, String[] origins);



    void onIssue(
Issue issue);



    void onRoutesUpdated(
MediaRoute[] routes, String mediaSource, String[] joinableRouteIds);



    void onSinkAvailabilityUpdated(
int availability);



    void onPresentationConnectionStateChanged(
String routeId, int state);



    void onPresentationConnectionClosed(
String routeId, int reason, String message);


}
