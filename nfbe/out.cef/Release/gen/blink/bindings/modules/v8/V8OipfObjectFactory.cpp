// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8OipfObjectFactory.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8HTMLObjectElement.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/modules/v8/V8ChannelConfig.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8OipfObjectFactory::wrapperTypeInfo = { gin::kEmbedderBlink, V8OipfObjectFactory::domTemplate, V8OipfObjectFactory::refObject, V8OipfObjectFactory::derefObject, V8OipfObjectFactory::trace, 0, 0, V8OipfObjectFactory::preparePrototypeAndInterfaceObject, V8OipfObjectFactory::installConditionallyEnabledProperties, "OipfObjectFactory", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in OipfObjectFactory.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& OipfObjectFactory::s_wrapperTypeInfo = V8OipfObjectFactory::wrapperTypeInfo;

namespace OipfObjectFactoryV8Internal {

static void isObjectSupportedMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 1)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "isObjectSupported", "OipfObjectFactory", 1, info.Length()), info.GetIsolate());
        return;
    }
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    V8StringResource<> mimeType;
    {
        mimeType = info[0];
        if (!mimeType.prepare())
            return;
    }
    v8SetReturnValueBool(info, impl->isObjectSupported(mimeType));
}

static void isObjectSupportedMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::isObjectSupportedMethod(info);
}

static void createVideoBroadcastObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    v8SetReturnValue(info, impl->createVideoBroadcastObject(executionContext));
}

static void createVideoBroadcastObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createVideoBroadcastObjectMethod(info);
}

static void createVideoMpegObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    v8SetReturnValue(info, impl->createVideoMpegObject(executionContext));
}

static void createVideoMpegObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createVideoMpegObjectMethod(info);
}

static void createApplicationManagerObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    ScriptValue result = impl->createApplicationManagerObject(scriptState, executionContext);
    v8SetReturnValue(info, result.v8Value());
}

static void createApplicationManagerObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createApplicationManagerObjectMethod(info);
}

static void createCapabilitiesObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    ScriptValue result = impl->createCapabilitiesObject(scriptState, executionContext);
    v8SetReturnValue(info, result.v8Value());
}

static void createCapabilitiesObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createCapabilitiesObjectMethod(info);
}

static void createConfigurationObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    ScriptValue result = impl->createConfigurationObject(scriptState, executionContext);
    v8SetReturnValue(info, result.v8Value());
}

static void createConfigurationObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createConfigurationObjectMethod(info);
}

static void createDownloadManagerObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    ScriptValue result = impl->createDownloadManagerObject(scriptState, executionContext);
    v8SetReturnValue(info, result.v8Value());
}

static void createDownloadManagerObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createDownloadManagerObjectMethod(info);
}

static void createDownloadTriggerObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    ScriptValue result = impl->createDownloadTriggerObject(scriptState, executionContext);
    v8SetReturnValue(info, result.v8Value());
}

static void createDownloadTriggerObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createDownloadTriggerObjectMethod(info);
}

static void createDrmAgentObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    ScriptValue result = impl->createDrmAgentObject(scriptState, executionContext);
    v8SetReturnValue(info, result.v8Value());
}

static void createDrmAgentObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createDrmAgentObjectMethod(info);
}

static void createParentalControlManagerObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    ScriptValue result = impl->createParentalControlManagerObject(scriptState, executionContext);
    v8SetReturnValue(info, result.v8Value());
}

static void createParentalControlManagerObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createParentalControlManagerObjectMethod(info);
}

static void createRecordingSchedulerObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    ScriptValue result = impl->createRecordingSchedulerObject(scriptState, executionContext);
    v8SetReturnValue(info, result.v8Value());
}

static void createRecordingSchedulerObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createRecordingSchedulerObjectMethod(info);
}

static void createRemoteManagementObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    ScriptValue result = impl->createRemoteManagementObject(scriptState, executionContext);
    v8SetReturnValue(info, result.v8Value());
}

static void createRemoteManagementObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createRemoteManagementObjectMethod(info);
}

static void createSearchManagerObjectMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
    ScriptValue result = impl->createSearchManagerObject(scriptState, executionContext);
    v8SetReturnValue(info, result.v8Value());
}

static void createSearchManagerObjectMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createSearchManagerObjectMethod(info);
}

static void createChannelConfigMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactory* impl = V8OipfObjectFactory::toImpl(info.Holder());
    v8SetReturnValue(info, impl->createChannelConfig());
}

static void createChannelConfigMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    OipfObjectFactoryV8Internal::createChannelConfigMethod(info);
}

} // namespace OipfObjectFactoryV8Internal

const V8DOMConfiguration::MethodConfiguration V8OipfObjectFactoryMethods[] = {
    {"isObjectSupported", OipfObjectFactoryV8Internal::isObjectSupportedMethodCallback, 0, 1, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createVideoBroadcastObject", OipfObjectFactoryV8Internal::createVideoBroadcastObjectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createVideoMpegObject", OipfObjectFactoryV8Internal::createVideoMpegObjectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createApplicationManagerObject", OipfObjectFactoryV8Internal::createApplicationManagerObjectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createCapabilitiesObject", OipfObjectFactoryV8Internal::createCapabilitiesObjectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createConfigurationObject", OipfObjectFactoryV8Internal::createConfigurationObjectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createDownloadManagerObject", OipfObjectFactoryV8Internal::createDownloadManagerObjectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createDownloadTriggerObject", OipfObjectFactoryV8Internal::createDownloadTriggerObjectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createDrmAgentObject", OipfObjectFactoryV8Internal::createDrmAgentObjectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createParentalControlManagerObject", OipfObjectFactoryV8Internal::createParentalControlManagerObjectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createRecordingSchedulerObject", OipfObjectFactoryV8Internal::createRecordingSchedulerObjectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createRemoteManagementObject", OipfObjectFactoryV8Internal::createRemoteManagementObjectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createSearchManagerObject", OipfObjectFactoryV8Internal::createSearchManagerObjectMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
    {"createChannelConfig", OipfObjectFactoryV8Internal::createChannelConfigMethodCallback, 0, 0, v8::None, V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype},
};

static void installV8OipfObjectFactoryTemplate(v8::Local<v8::FunctionTemplate> interfaceTemplate, v8::Isolate* isolate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8OipfObjectFactory::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8OipfObjectFactory::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    if (RuntimeEnabledFeatures::hbbTVEnabled()) {
        V8DOMConfiguration::installMethods(isolate, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8OipfObjectFactoryMethods, WTF_ARRAY_LENGTH(V8OipfObjectFactoryMethods));
    } // if (RuntimeEnabledFeatures::hbbTVEnabled())
}

v8::Local<v8::FunctionTemplate> V8OipfObjectFactory::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8OipfObjectFactoryTemplate);
}

bool V8OipfObjectFactory::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8OipfObjectFactory::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

OipfObjectFactory* V8OipfObjectFactory::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8OipfObjectFactory::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8OipfObjectFactory::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
