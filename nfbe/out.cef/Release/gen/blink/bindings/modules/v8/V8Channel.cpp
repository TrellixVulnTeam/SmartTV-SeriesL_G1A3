// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "V8Channel.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "core/dom/Document.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

// Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
const WrapperTypeInfo V8Channel::wrapperTypeInfo = { gin::kEmbedderBlink, V8Channel::domTemplate, V8Channel::refObject, V8Channel::derefObject, V8Channel::trace, 0, 0, V8Channel::preparePrototypeAndInterfaceObject, V8Channel::installConditionallyEnabledProperties, "Channel", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::ObjectClassId, WrapperTypeInfo::NotInheritFromEventTarget, WrapperTypeInfo::Independent, WrapperTypeInfo::GarbageCollectedObject };
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

// This static member must be declared by DEFINE_WRAPPERTYPEINFO in Channel.h.
// For details, see the comment of DEFINE_WRAPPERTYPEINFO in
// bindings/core/v8/ScriptWrappable.h.
const WrapperTypeInfo& Channel::s_wrapperTypeInfo = V8Channel::wrapperTypeInfo;

namespace ChannelV8Internal {

static void channelTypeAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Channel* impl = V8Channel::toImpl(holder);
    v8SetReturnValueInt(info, impl->channelType());
}

static void channelTypeAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ChannelV8Internal::channelTypeAttributeGetter(info);
}

static void ccidAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Channel* impl = V8Channel::toImpl(holder);
    v8SetReturnValueString(info, impl->ccid(), info.GetIsolate());
}

static void ccidAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ChannelV8Internal::ccidAttributeGetter(info);
}

static void dsdAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Channel* impl = V8Channel::toImpl(holder);
    v8SetReturnValueString(info, impl->dsd(), info.GetIsolate());
}

static void dsdAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ChannelV8Internal::dsdAttributeGetter(info);
}

static void onidAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Channel* impl = V8Channel::toImpl(holder);
    v8SetReturnValueInt(info, impl->onid());
}

static void onidAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ChannelV8Internal::onidAttributeGetter(info);
}

static void tsidAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Channel* impl = V8Channel::toImpl(holder);
    v8SetReturnValueInt(info, impl->tsid());
}

static void tsidAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ChannelV8Internal::tsidAttributeGetter(info);
}

static void sidAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Channel* impl = V8Channel::toImpl(holder);
    v8SetReturnValueInt(info, impl->sid());
}

static void sidAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ChannelV8Internal::sidAttributeGetter(info);
}

static void nameAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    Channel* impl = V8Channel::toImpl(holder);
    v8SetReturnValueString(info, impl->name(), info.GetIsolate());
}

static void nameAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ChannelV8Internal::nameAttributeGetter(info);
}

} // namespace ChannelV8Internal

const V8DOMConfiguration::AccessorConfiguration V8ChannelAccessors[] = {
    {"channelType", ChannelV8Internal::channelTypeAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"ccid", ChannelV8Internal::ccidAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"dsd", ChannelV8Internal::dsdAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"onid", ChannelV8Internal::onidAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"tsid", ChannelV8Internal::tsidAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"sid", ChannelV8Internal::sidAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"name", ChannelV8Internal::nameAttributeGetterCallback, 0, 0, 0, 0, v8::DEFAULT, static_cast<v8::PropertyAttribute>(v8::ReadOnly), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};

static void installV8ChannelTemplate(v8::Local<v8::FunctionTemplate> interfaceTemplate, v8::Isolate* isolate)
{
    // Initialize the interface object's template.
    V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, V8Channel::wrapperTypeInfo.interfaceName, v8::Local<v8::FunctionTemplate>(), V8Channel::internalFieldCount);
    v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
    ALLOW_UNUSED_LOCAL(signature);
    v8::Local<v8::ObjectTemplate> instanceTemplate = interfaceTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = interfaceTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
    // Register DOM constants, attributes and operations.
    if (RuntimeEnabledFeatures::hbbTVEnabled()) {
        const V8DOMConfiguration::ConstantConfiguration V8ChannelConstants[] = {
            {"TYPE_TV", 0, 0, V8DOMConfiguration::ConstantTypeLong},
            {"TYPE_RADIO", 1, 0, V8DOMConfiguration::ConstantTypeLong},
            {"TYPE_OTHER", 2, 0, V8DOMConfiguration::ConstantTypeLong},
            {"TYPE_ALL", 128, 0, V8DOMConfiguration::ConstantTypeLong},
            {"TYPE_HBBTV_DATA", 256, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_ANALOG", 0, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_DVB_C", 10, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_DVB_S", 11, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_DVB_T", 12, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_DVB_SI_DIRECT", 13, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_DVB_C2", 14, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_DVB_S2", 15, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_DVB_T2", 16, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_ISDB_C", 20, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_ISDB_S", 21, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_ISDB_T", 22, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_ATSC_T", 30, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_IPTV_SDS", 40, 0, V8DOMConfiguration::ConstantTypeLong},
            {"ID_IPTV_URI", 41, 0, V8DOMConfiguration::ConstantTypeLong},
        };
        V8DOMConfiguration::installConstants(isolate, interfaceTemplate, prototypeTemplate, V8ChannelConstants, WTF_ARRAY_LENGTH(V8ChannelConstants));
        static_assert(0 == Channel::TYPE_TV, "the value of Channel_TYPE_TV does not match with implementation");
        static_assert(1 == Channel::TYPE_RADIO, "the value of Channel_TYPE_RADIO does not match with implementation");
        static_assert(2 == Channel::TYPE_OTHER, "the value of Channel_TYPE_OTHER does not match with implementation");
        static_assert(128 == Channel::TYPE_ALL, "the value of Channel_TYPE_ALL does not match with implementation");
        static_assert(256 == Channel::TYPE_HBBTV_DATA, "the value of Channel_TYPE_HBBTV_DATA does not match with implementation");
        static_assert(0 == Channel::ID_ANALOG, "the value of Channel_ID_ANALOG does not match with implementation");
        static_assert(10 == Channel::ID_DVB_C, "the value of Channel_ID_DVB_C does not match with implementation");
        static_assert(11 == Channel::ID_DVB_S, "the value of Channel_ID_DVB_S does not match with implementation");
        static_assert(12 == Channel::ID_DVB_T, "the value of Channel_ID_DVB_T does not match with implementation");
        static_assert(13 == Channel::ID_DVB_SI_DIRECT, "the value of Channel_ID_DVB_SI_DIRECT does not match with implementation");
        static_assert(14 == Channel::ID_DVB_C2, "the value of Channel_ID_DVB_C2 does not match with implementation");
        static_assert(15 == Channel::ID_DVB_S2, "the value of Channel_ID_DVB_S2 does not match with implementation");
        static_assert(16 == Channel::ID_DVB_T2, "the value of Channel_ID_DVB_T2 does not match with implementation");
        static_assert(20 == Channel::ID_ISDB_C, "the value of Channel_ID_ISDB_C does not match with implementation");
        static_assert(21 == Channel::ID_ISDB_S, "the value of Channel_ID_ISDB_S does not match with implementation");
        static_assert(22 == Channel::ID_ISDB_T, "the value of Channel_ID_ISDB_T does not match with implementation");
        static_assert(30 == Channel::ID_ATSC_T, "the value of Channel_ID_ATSC_T does not match with implementation");
        static_assert(40 == Channel::ID_IPTV_SDS, "the value of Channel_ID_IPTV_SDS does not match with implementation");
        static_assert(41 == Channel::ID_IPTV_URI, "the value of Channel_ID_IPTV_URI does not match with implementation");
        V8DOMConfiguration::installAccessors(isolate, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, V8ChannelAccessors, WTF_ARRAY_LENGTH(V8ChannelAccessors));
    } // if (RuntimeEnabledFeatures::hbbTVEnabled())
}

v8::Local<v8::FunctionTemplate> V8Channel::domTemplate(v8::Isolate* isolate)
{
    return V8DOMConfiguration::domClassTemplate(isolate, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), installV8ChannelTemplate);
}

bool V8Channel::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
}

v8::Local<v8::Object> V8Channel::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate)
{
    return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
}

Channel* V8Channel::toImplWithTypeCheck(v8::Isolate* isolate, v8::Local<v8::Value> value)
{
    return hasInstance(value, isolate) ? toImpl(v8::Local<v8::Object>::Cast(value)) : 0;
}

void V8Channel::refObject(ScriptWrappable* scriptWrappable)
{
}

void V8Channel::derefObject(ScriptWrappable* scriptWrappable)
{
}

} // namespace blink
